%                                                                                                          
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                   
%                                                                                                          
%--------------------------------------------------------------------------------------------------------- 
%This Model Only Support Single Channel Input Data. 
%Please input:                                      
%data vector: 		stimulation(1:n)                
%FILTER PARAMETER  
%Input Data Width: 32
%Decimation Factor: 20
%MSB Truncated Bits:
%MSB Satuated Bits :
%LSB Truncated bits:
%LSB Rounded bits  :
%FIR Width (Full Calculation Width Before Output Width Adjust) :32 
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values
 function  output = fir_20ex_2ch_mlab(stimulation, output);
 coef_matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,-24,-31,-38,-45,-52,-58,-64,-69,-72,-74,-75,-74,-70,-65,-58,-48,-37,-24,0,0,27,46,66,86,106,125,143,160,174,185,193,198,198,194,186,173,156,134,107,76,42,0,-36,-78,-121,-164,-207,-248,-286,-321,-350,-375,-393,-403,-406,-401,-387,-364,-332,-291,-242,-186,-122,-53,22,100,179,260,339,415,487,552,609,657,693,717,727,724,705,670,621,556,477,385,280,165,41,-89,-223,-359,-493,-624,-747,-861,-962,-1049,-1117,-1166,-1193,-1198,-1178,-1134,-1065,-971,-854,-715,-556,-379,-187,0,227,442,657,866,1067,1254,1423,1570,1691,1783,1843,1868,1856,1806,1719,1594,1432,1235,1006,749,468,166,-149,-473,-799,-1121,-1431,-1725,-1994,-2232,-2435,-2595,-2710,-2774,-2785,-2741,-2641,-2484,-2273,-2009,-1696,-1339,-943,-514,-62,407,883,1358,1821,2263,2674,3045,3368,3634,3837,3969,4027,4007,3906,3725,3463,3125,2714,2236,1700,1112,485,-172,-845,-1522,-2189,-2833,-3441,-3998,-4493,-4914,-5250,-5491,-5631,-5664,-5585,-5393,-5088,-4674,-4155,-3538,-2833,-2052,-1208,-315,610,1549,2484,3397,4269,5081,5815,6455,6986,7393,7665,7793,7771,7595,7263,6779,6148,5377,4480,3469,2362,1178,-61,-1333,-2612,-3875,-5095,-6247,-7307,-8250,-9056,-9705,-10179,-10465,-10552,-10433,-10105,-9568,-8829,-7897,-6784,-5508,-4090,-2554,-928,758,2473,4183,5856,7456,8950,10306,11494,12485,13256,13786,14057,14058,13783,13228,12400,11306,9961,8387,6608,4654,2559,361,-1899,-4178,-6432,-8615,-10684,-12593,-14303,-15773,-16969,-17861,-18424,-18638,-18490,-17975,-17093,-15853,-14270,-12367,-10174,-7726,-5065,-2239,701,3700,6700,9643,12469,15120,17539,19672,21472,22894,23901,24463,24557,24172,23301,21950,20135,17878,15214,12184,8839,5237,1443,-2475,-6443,-10383,-14217,-17869,-21260,-24320,-26978,-29173,-30850,-31963,-32475,-32363,-31610,-30217,-28195,-25565,-22365,-18643,-14457,-9878,-4985,133,5384,10666,15879,20917,25678,30061,33971,37317,40020,42008,43225,43625,43178,41869,39700,36689,32873,28302,23046,17186,10821,4060,-2977,-10159,-17352,-24416,-31207,-37588,-43419,-48572,-52926,-56370,-58811,-60169,-60384,-59416,-57246,-53878,-49337,-43675,-36964,-29299,-20797,-11595,-1846,8279,18597,28916,39036,48754,57867,66178,73496,79641,84450,87779,89504,89529,87782,84225,78849,71679,62776,52232,40174,26763,12192,-3319,-19520,-36140,-52886,-69449,-85508,-100735,-114801,-127377,-138144,-146797,-153048,-156632,-157313,-154887,-149186,-140084,-127495,-111380,-91748,-68654,-42204,-12549,20108,55522,93405,133427,175223,218396,262522,307154,351833,396087,439439,481419,521562,559420,594566,626601,655157,679905,700560,716879,728675,735808,738196,735808,728675,716879,700560,679905,655157,626601,594566,559420,521562,481419,439439,396087,351833,307154,262522,218396,175223,133427,93405,55522,20108,-12549,-42204,-68654,-91748,-111380,-127495,-140084,-149186,-154887,-157313,-156632,-153048,-146797,-138144,-127377,-114801,-100735,-85508,-69449,-52886,-36140,-19520,-3319,12192,26763,40174,52232,62776,71679,78849,84225,87782,89529,89504,87779,84450,79641,73496,66178,57867,48754,39036,28916,18597,8279,-1846,-11595,-20797,-29299,-36964,-43675,-49337,-53878,-57246,-59416,-60384,-60169,-58811,-56370,-52926,-48572,-43419,-37588,-31207,-24416,-17352,-10159,-2977,4060,10821,17186,23046,28302,32873,36689,39700,41869,43178,43625,43225,42008,40020,37317,33971,30061,25678,20917,15879,10666,5384,133,-4985,-9878,-14457,-18643,-22365,-25565,-28195,-30217,-31610,-32363,-32475,-31963,-30850,-29173,-26978,-24320,-21260,-17869,-14217,-10383,-6443,-2475,1443,5237,8839,12184,15214,17878,20135,21950,23301,24172,24557,24463,23901,22894,21472,19672,17539,15120,12469,9643,6700,3700,701,-2239,-5065,-7726,-10174,-12367,-14270,-15853,-17093,-17975,-18490,-18638,-18424,-17861,-16969,-15773,-14303,-12593,-10684,-8615,-6432,-4178,-1899,361,2559,4654,6608,8387,9961,11306,12400,13228,13783,14058,14057,13786,13256,12485,11494,10306,8950,7456,5856,4183,2473,758,-928,-2554,-4090,-5508,-6784,-7897,-8829,-9568,-10105,-10433,-10552,-10465,-10179,-9705,-9056,-8250,-7307,-6247,-5095,-3875,-2612,-1333,-61,1178,2362,3469,4480,5377,6148,6779,7263,7595,7771,7793,7665,7393,6986,6455,5815,5081,4269,3397,2484,1549,610,-315,-1208,-2052,-2833,-3538,-4155,-4674,-5088,-5393,-5585,-5664,-5631,-5491,-5250,-4914,-4493,-3998,-3441,-2833,-2189,-1522,-845,-172,485,1112,1700,2236,2714,3125,3463,3725,3906,4007,4027,3969,3837,3634,3368,3045,2674,2263,1821,1358,883,407,-62,-514,-943,-1339,-1696,-2009,-2273,-2484,-2641,-2741,-2785,-2774,-2710,-2595,-2435,-2232,-1994,-1725,-1431,-1121,-799,-473,-149,166,468,749,1006,1235,1432,1594,1719,1806,1856,1868,1843,1783,1691,1570,1423,1254,1067,866,657,442,227,0,-187,-379,-556,-715,-854,-971,-1065,-1134,-1178,-1198,-1193,-1166,-1117,-1049,-962,-861,-747,-624,-493,-359,-223,-89,41,165,280,385,477,556,621,670,705,724,727,717,693,657,609,552,487,415,339,260,179,100,22,-53,-122,-186,-242,-291,-332,-364,-387,-401,-406,-403,-393,-375,-350,-321,-286,-248,-207,-164,-121,-78,-36,0,42,76,107,134,156,173,186,194,198,198,193,185,174,160,143,125,106,86,66,46,27,0,0,-24,-37,-48,-58,-65,-70,-74,-75,-74,-72,-69,-64,-58,-52,-45,-38,-31,-24,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;         
 DECI_FACTOR  =  20;
 MSB_RM  = 1;
 MSB_TYPE  = 0;
 LSB_RM  = 24;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 32 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 32 ;  %32
  DATA_WIDTH = 32;
 data_type = 1;

 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix); 
 if (CX ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 
   
 %fill coef_matrix to length of data with the latest coef set 
 if (CX < DY * INTER_FACTOR) 
   for i= CX +1:DY * INTER_FACTOR 
     coef_matrix(i,:) = coef_matrix(CX,:); 
   end 
 end
  
        %check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else
     		output = out_dec;%(DECI_FACTOR:DECI_FACTOR:len1);
 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);       
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  
         
